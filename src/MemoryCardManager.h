#pragma once

#include <cstdint>
#include <string>
#include <span>
#include <vector>
#include <array>

class MemoryCardManager {
public:
    enum class ConversionMode {
        BinaryToEcc,  // -2e
        EccToBinary   // -2b
    };

    MemoryCardManager() = default;
    ~MemoryCardManager() = default;

    /**
     * @brief Convert between memory card formats
     * 
     * @param inputFile Path to the input memory card file
     * @param outputFile Path where the output should be saved
     * @param mode The conversion mode (binary to ECC or vice versa)
     * @return true if conversion was successful, false otherwise
     */
    static bool convertMemoryCard(const std::string& inputFile, const std::string& outputFile, 
                          ConversionMode mode);

private:
    /**
     * @brief Calculates a checksum for a given data block
     *
     * @param data Input data block
     * @param checksum Output buffer for the 3-byte checksum
     */
    static void calcChecksum(std::span<const std::uint8_t> data, std::span<std::uint8_t> checksum);

    /**
     * @brief Convert non ECC binary memory card to ECC format
     */
    static bool convertBinToEcc(const std::string& inputFile, const std::string& outputFile);

    /**
     * @brief Convert ECC memory card to non ECC binary format
     */
    static bool convertEccToBin(const std::string& inputFile, const std::string& outputFile);

    // Constants
    static constexpr size_t BLOCK_SIZE = 128;
    static constexpr size_t BINARY_BLOCK_SIZE = 512;
    static constexpr size_t ECC_BLOCK_SIZE = 528;
    static constexpr size_t CHECKSUM_SIZE = 3;
    
    // XOR lookup table for checksum calculation
    static constexpr std::array<std::uint8_t, 256> XORTABLE = {
        0x00, 0x87, 0x96, 0x11, 0xA5, 0x22, 0x33, 0xB4,
        0xB4, 0x33, 0x22, 0xA5, 0x11, 0x96, 0x87, 0x00,
        0xC3, 0x44, 0x55, 0xD2, 0x66, 0xE1, 0xF0, 0x77,
        0x77, 0xF0, 0xE1, 0x66, 0xD2, 0x55, 0x44, 0xC3,
        0xD2, 0x55, 0x44, 0xC3, 0x77, 0xF0, 0xE1, 0x66,
        0x66, 0xE1, 0xF0, 0x77, 0xC3, 0x44, 0x55, 0xD2,
        0x11, 0x96, 0x87, 0x00, 0xB4, 0x33, 0x22, 0xA5,
        0xA5, 0x22, 0x33, 0xB4, 0x00, 0x87, 0x96, 0x11,
        0xE1, 0x66, 0x77, 0xF0, 0x44, 0xC3, 0xD2, 0x55,
        0x55, 0xD2, 0xC3, 0x44, 0xF0, 0x77, 0x66, 0xE1,
        0x22, 0xA5, 0xB4, 0x33, 0x87, 0x00, 0x11, 0x96,
        0x96, 0x11, 0x00, 0x87, 0x33, 0xB4, 0xA5, 0x22,
        0x33, 0xB4, 0xA5, 0x22, 0x96, 0x11, 0x00, 0x87,
        0x87, 0x00, 0x11, 0x96, 0x22, 0xA5, 0xB4, 0x33,
        0xF0, 0x77, 0x66, 0xE1, 0x55, 0xD2, 0xC3, 0x44,
        0x44, 0xC3, 0xD2, 0x55, 0xE1, 0x66, 0x77, 0xF0,
        0xF0, 0x77, 0x66, 0xE1, 0x55, 0xD2, 0xC3, 0x44,
        0x44, 0xC3, 0xD2, 0x55, 0xE1, 0x66, 0x77, 0xF0,
        0x33, 0xB4, 0xA5, 0x22, 0x96, 0x11, 0x00, 0x87,
        0x87, 0x00, 0x11, 0x96, 0x22, 0xA5, 0xB4, 0x33,
        0x22, 0xA5, 0xB4, 0x33, 0x87, 0x00, 0x11, 0x96,
        0x96, 0x11, 0x00, 0x87, 0x33, 0xB4, 0xA5, 0x22,
        0xE1, 0x66, 0x77, 0xF0, 0x44, 0xC3, 0xD2, 0x55,
        0x55, 0xD2, 0xC3, 0x44, 0xF0, 0x77, 0x66, 0xE1,
        0x11, 0x96, 0x87, 0x00, 0xB4, 0x33, 0x22, 0xA5,
        0xA5, 0x22, 0x33, 0xB4, 0x00, 0x87, 0x96, 0x11,
        0xD2, 0x55, 0x44, 0xC3, 0x77, 0xF0, 0xE1, 0x66,
        0x66, 0xE1, 0xF0, 0x77, 0xC3, 0x44, 0x55, 0xD2,
        0xC3, 0x44, 0x55, 0xD2, 0x66, 0xE1, 0xF0, 0x77,
        0x77, 0xF0, 0xE1, 0x66, 0xD2, 0x55, 0x44, 0xC3,
        0x00, 0x87, 0x96, 0x11, 0xA5, 0x22, 0x33, 0xB4,
        0xB4, 0x33, 0x22, 0xA5, 0x11, 0x96, 0x87, 0x00
    };
};